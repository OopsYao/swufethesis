name: CI
on:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-18.04
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    env:
      cache-version: v20210203.1
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Set up PATH
        run: echo "/tmp/texlive/bin/x86_64-linux" >> $GITHUB_PATH
      - name: Cache
        id: cache
        uses: actions/cache@v2.1.4
        with:
          path: |
            /tmp/texlive
            /opt/hostedtoolcache/perl
          key: ${{ runner.os }}-texlive-${{ hashFiles('.github/workflows/perl-modules') }}-${{ env.cache-version }}
      - name: Download install-tl.zip
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl -sOL http://mirror.ctan.org/systems/texlive/tlnet/install-tl.zip
          unzip -q install-tl.zip
          mv install-tl-2* install-tl-dir
      - name: Run install-tl
        if: steps.cache.outputs.cache-hit != 'true'
        run: install-tl-dir/install-tl --profile .github/workflows/texlive-linux.profile
      - name: Run tlmgr install
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          tlmgr update --self
          tlmgr install latex-bin latexindent
      - name: Setup Perl environment
        uses: shogo82148/actions-setup-perl@v1.10.0
      - name: Install some other perl dependencies
        run: cpanm $(cat .github/workflows/perl-modules)
      - name: Check format
        run: |
          set -e
          for f in $(find -name '*.tex' \
                          -or -name '*.cls' \
                          -or -name '*.bib'); do
            latexindent -l "$f" | diff "$f" -
          done

  # CTAN没有一个提供像npm那样的依赖管理机制，
  # 个人觉得这样宽松的依赖下进行l3build严格的对比机制不是太合理的
  # 也许前一天能通过的测试，第二天由于依赖的包更新就无法通过了
  # 开发环境的包的版本与CI上的很难一致
  # 也许需要把环境做成容器固定下来，这样CI与开发就能一致
  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        cache-version: [v20210301.3]
        os:
          - ubuntu-18.04
          - macos-10.15
          # Windows上生成的tlg与linux、macos平台下总是有细微区别
          # 暂时没找到办法，决定不测了
          # - windows-2019
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Cache TeX Live
        id: cache
        uses: actions/cache@v2.1.4
        with:
          path: tl
          key: tl-${{ runner.os }}-${{ hashFiles('ci/texlive-packages') }}-${{ matrix.cache-version }}
      - name: Set up PATH
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo "${{ github.workspace }}/tl/bin/x86_64-linux" >> $GITHUB_PATH
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "${{ github.workspace }}/tl/bin/x86_64-darwin" >> $GITHUB_PATH
          else
            echo "${{ github.workspace }}\tl\bin\win32" >> $GITHUB_PATH
          fi
      - name: Install TeX Live
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash
        run: source ci/texlive-install.sh "${{ github.workspace }}/tl"
      - name: l3build
        shell: bash
        run: l3build check -q
      - name: Check failure
        if: ${{ failure() }}
        shell: bash
        run: cat build/test/*.diff || cat build/test/*.fc
